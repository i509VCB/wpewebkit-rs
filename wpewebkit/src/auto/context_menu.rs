// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "WebKitContextMenu")]
    pub struct ContextMenu(Object<ffi::WebKitContextMenu, ffi::WebKitContextMenuClass>);

    match fn {
        type_ => || ffi::webkit_context_menu_get_type(),
    }
}

impl ContextMenu {
    pub const NONE: Option<&'static ContextMenu> = None;

    #[doc(alias = "webkit_context_menu_new")]
    pub fn new() -> ContextMenu {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::webkit_context_menu_new()) }
    }

    //#[doc(alias = "webkit_context_menu_new_with_items")]
    //#[doc(alias = "new_with_items")]
    //pub fn with_items(items: /*Ignored*/&[ContextMenuItem]) -> ContextMenu {
    //    unsafe { TODO: call ffi:webkit_context_menu_new_with_items() }
    //}
}

impl Default for ContextMenu {
    fn default() -> Self {
        Self::new()
    }
}

pub trait ContextMenuExt: 'static {
    //#[doc(alias = "webkit_context_menu_append")]
    //fn append(&self, item: /*Ignored*/&ContextMenuItem);

    //#[doc(alias = "webkit_context_menu_first")]
    //fn first(&self) -> /*Ignored*/Option<ContextMenuItem>;

    //#[doc(alias = "webkit_context_menu_get_item_at_position")]
    //#[doc(alias = "get_item_at_position")]
    //fn item_at_position(&self, position: u32) -> /*Ignored*/Option<ContextMenuItem>;

    //#[doc(alias = "webkit_context_menu_get_items")]
    //#[doc(alias = "get_items")]
    //fn items(&self) -> /*Ignored*/Vec<ContextMenuItem>;

    #[doc(alias = "webkit_context_menu_get_n_items")]
    #[doc(alias = "get_n_items")]
    fn n_items(&self) -> u32;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_8")))]
    #[doc(alias = "webkit_context_menu_get_user_data")]
    #[doc(alias = "get_user_data")]
    fn user_data(&self) -> Option<glib::Variant>;

    //#[doc(alias = "webkit_context_menu_insert")]
    //fn insert(&self, item: /*Ignored*/&ContextMenuItem, position: i32);

    //#[doc(alias = "webkit_context_menu_last")]
    //fn last(&self) -> /*Ignored*/Option<ContextMenuItem>;

    //#[doc(alias = "webkit_context_menu_move_item")]
    //fn move_item(&self, item: /*Ignored*/&ContextMenuItem, position: i32);

    //#[doc(alias = "webkit_context_menu_prepend")]
    //fn prepend(&self, item: /*Ignored*/&ContextMenuItem);

    //#[doc(alias = "webkit_context_menu_remove")]
    //fn remove(&self, item: /*Ignored*/&ContextMenuItem);

    #[doc(alias = "webkit_context_menu_remove_all")]
    fn remove_all(&self);

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_8")))]
    #[doc(alias = "webkit_context_menu_set_user_data")]
    fn set_user_data(&self, user_data: &glib::Variant);
}

impl<O: IsA<ContextMenu>> ContextMenuExt for O {
    //fn append(&self, item: /*Ignored*/&ContextMenuItem) {
    //    unsafe { TODO: call ffi:webkit_context_menu_append() }
    //}

    //fn first(&self) -> /*Ignored*/Option<ContextMenuItem> {
    //    unsafe { TODO: call ffi:webkit_context_menu_first() }
    //}

    //fn item_at_position(&self, position: u32) -> /*Ignored*/Option<ContextMenuItem> {
    //    unsafe { TODO: call ffi:webkit_context_menu_get_item_at_position() }
    //}

    //fn items(&self) -> /*Ignored*/Vec<ContextMenuItem> {
    //    unsafe { TODO: call ffi:webkit_context_menu_get_items() }
    //}

    fn n_items(&self) -> u32 {
        unsafe { ffi::webkit_context_menu_get_n_items(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_8")))]
    fn user_data(&self) -> Option<glib::Variant> {
        unsafe {
            from_glib_none(ffi::webkit_context_menu_get_user_data(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    //fn insert(&self, item: /*Ignored*/&ContextMenuItem, position: i32) {
    //    unsafe { TODO: call ffi:webkit_context_menu_insert() }
    //}

    //fn last(&self) -> /*Ignored*/Option<ContextMenuItem> {
    //    unsafe { TODO: call ffi:webkit_context_menu_last() }
    //}

    //fn move_item(&self, item: /*Ignored*/&ContextMenuItem, position: i32) {
    //    unsafe { TODO: call ffi:webkit_context_menu_move_item() }
    //}

    //fn prepend(&self, item: /*Ignored*/&ContextMenuItem) {
    //    unsafe { TODO: call ffi:webkit_context_menu_prepend() }
    //}

    //fn remove(&self, item: /*Ignored*/&ContextMenuItem) {
    //    unsafe { TODO: call ffi:webkit_context_menu_remove() }
    //}

    fn remove_all(&self) {
        unsafe {
            ffi::webkit_context_menu_remove_all(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_8")))]
    fn set_user_data(&self, user_data: &glib::Variant) {
        unsafe {
            ffi::webkit_context_menu_set_user_data(
                self.as_ref().to_glib_none().0,
                user_data.to_glib_none().0,
            );
        }
    }
}

impl fmt::Display for ContextMenu {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ContextMenu")
    }
}
