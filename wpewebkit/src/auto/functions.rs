// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

#[cfg(any(feature = "v2_32", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_32")))]
use crate::MediaKeySystemPermissionRequest;
#[cfg(any(feature = "v2_8", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_8")))]
use crate::UserMediaPermissionRequest;
#[cfg(any(feature = "v2_8", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_8")))]
use glib::object::IsA;
use glib::translate::*;

#[doc(alias = "webkit_get_major_version")]
#[doc(alias = "get_major_version")]
pub fn major_version() -> u32 {
    skip_assert_initialized!();
    unsafe { ffi::webkit_get_major_version() }
}

#[doc(alias = "webkit_get_micro_version")]
#[doc(alias = "get_micro_version")]
pub fn micro_version() -> u32 {
    skip_assert_initialized!();
    unsafe { ffi::webkit_get_micro_version() }
}

#[doc(alias = "webkit_get_minor_version")]
#[doc(alias = "get_minor_version")]
pub fn minor_version() -> u32 {
    skip_assert_initialized!();
    unsafe { ffi::webkit_get_minor_version() }
}

#[cfg(any(feature = "v2_32", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_32")))]
#[doc(alias = "webkit_media_key_system_permission_get_name")]
pub fn media_key_system_permission_get_name(
    request: &impl IsA<MediaKeySystemPermissionRequest>,
) -> Option<glib::GString> {
    skip_assert_initialized!();
    unsafe {
        from_glib_none(ffi::webkit_media_key_system_permission_get_name(
            request.as_ref().to_glib_none().0,
        ))
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_24")))]
#[doc(alias = "webkit_uri_for_display")]
pub fn uri_for_display(uri: &str) -> Option<glib::GString> {
    assert_initialized_main_thread!();
    unsafe { from_glib_full(ffi::webkit_uri_for_display(uri.to_glib_none().0)) }
}

#[cfg(any(feature = "v2_8", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_8")))]
#[doc(alias = "webkit_user_media_permission_is_for_audio_device")]
pub fn user_media_permission_is_for_audio_device(
    request: &impl IsA<UserMediaPermissionRequest>,
) -> bool {
    skip_assert_initialized!();
    unsafe {
        from_glib(ffi::webkit_user_media_permission_is_for_audio_device(
            request.as_ref().to_glib_none().0,
        ))
    }
}

#[cfg(any(feature = "v2_34", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_34")))]
#[doc(alias = "webkit_user_media_permission_is_for_display_device")]
pub fn user_media_permission_is_for_display_device(
    request: &impl IsA<UserMediaPermissionRequest>,
) -> bool {
    skip_assert_initialized!();
    unsafe {
        from_glib(ffi::webkit_user_media_permission_is_for_display_device(
            request.as_ref().to_glib_none().0,
        ))
    }
}

#[cfg(any(feature = "v2_8", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_8")))]
#[doc(alias = "webkit_user_media_permission_is_for_video_device")]
pub fn user_media_permission_is_for_video_device(
    request: &impl IsA<UserMediaPermissionRequest>,
) -> bool {
    skip_assert_initialized!();
    unsafe {
        from_glib(ffi::webkit_user_media_permission_is_for_video_device(
            request.as_ref().to_glib_none().0,
        ))
    }
}
