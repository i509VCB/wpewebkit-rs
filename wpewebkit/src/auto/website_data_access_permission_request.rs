// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "WebKitWebsiteDataAccessPermissionRequest")]
    pub struct WebsiteDataAccessPermissionRequest(Object<ffi::WebKitWebsiteDataAccessPermissionRequest, ffi::WebKitWebsiteDataAccessPermissionRequestClass>);

    match fn {
        type_ => || ffi::webkit_website_data_access_permission_request_get_type(),
    }
}

impl WebsiteDataAccessPermissionRequest {
        pub const NONE: Option<&'static WebsiteDataAccessPermissionRequest> = None;
    
}

pub trait WebsiteDataAccessPermissionRequestExt: 'static {
    #[doc(alias = "webkit_website_data_access_permission_request_get_current_domain")]
    #[doc(alias = "get_current_domain")]
    fn current_domain(&self) -> Option<glib::GString>;

    #[doc(alias = "webkit_website_data_access_permission_request_get_requesting_domain")]
    #[doc(alias = "get_requesting_domain")]
    fn requesting_domain(&self) -> Option<glib::GString>;
}

impl<O: IsA<WebsiteDataAccessPermissionRequest>> WebsiteDataAccessPermissionRequestExt for O {
    fn current_domain(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_access_permission_request_get_current_domain(self.as_ref().to_glib_none().0))
        }
    }

    fn requesting_domain(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::webkit_website_data_access_permission_request_get_requesting_domain(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for WebsiteDataAccessPermissionRequest {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("WebsiteDataAccessPermissionRequest")
    }
}
